Task 2:
Troubleshooting and resolving real-time updating issues in a ReactJS and Tailwind CSS dashboard that fetches data from a REST API involves several steps. Here's a step-by-step approach I would follow to address the problem:

1. Understanding the Data Flow:
Firstly, I will examine the data flow from the REST API to the chart components to make sure that the data is being received correctly and stored in the component's state.

2. Checking API Requests:
Then I will verify that API requests are triggered at appropriate intervals or events. I will ensure that the requests are fetching the latest data from the server.

3. Updating Component State:
Once data is fetched successfully, I should update the component's state using React's “useState” or a state management library like Redux.

4. Re-render Components:
After that, I will ensure that the components responsible for rendering the charts are re-rendered when the state is updated. This can be done by using useState or useEffect hooks.
Using useState hook:
const [chartData, setChartData] = useState([]);
Using useEffect to re-render on data change:
useEffect(() => {
  Update chart rendering logic here…
}, [chartData]);

5. Debugging with Console Logs:
Inserting console.log statements at key points in my code to trace the flow of data and identify any issues. Meanwhile I will check the browser's developer console for error messages or unexpected behaviors. 

Challenges:
Asynchronous Nature: Ensuring that asynchronous operations, such as API requests, are handled correctly. async/await or promises can be used to handle asynchronous behavior.
State Management: If using Redux or another state management library, should ensure that the state is updated properly, and connected components are aware of the changes.
Performance Considerations: Real-time updates can impact performance. Consider optimizations, like debouncing or throttling API requests, to avoid excessive re-renders.

Overall Thought Process:
Data Flow Analysis: Understand how data flows from the API to the charts.
Code Inspection: Review the code for any potential issues related to state management and rendering.
Console Logging: Use console.log statements to debug and trace the data flow.
API Request Verification: Confirm that API requests are fetching the latest data.
State Update: Ensure the component state is updated correctly and triggers re-renders.
Performance Optimization: Consider optimizations for handling real-time updates efficiently.
Testing: Test the application thoroughly, including edge cases and scenarios with frequent data changes.

By following these steps and staying cautious about potential challenges, I can troubleshoot and resolve issues with real-time updates in a ReactJS and Tailwind CSS dashboard.